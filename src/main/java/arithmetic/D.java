package arithmetic;
// 数据结构
//  数据的逻辑结构:
//       线性结构: 线性表,栈(特殊线性表),队列(特殊线性表),字符串,数组,广义表
//       非线性结构: 树形结构/图形结构
//  数据的存储结构: 顺序存储/链式存储
//  数据的运算: 查找/排序/删除/修改等.

// 查找: 查找表
// 查找表是由同一类的数据元素(或记录)构成的集合.由于"集合"中的数据元素之间存在着松散关系,因此查找表是一种应用灵便的结构(没有严格的前驱和后继关系)
// 什么是查找? : 根据给定的某个值,在查找表中确定一个其关键字等于给定值的数据元素或记录
// ~ 关键字: 用来标识一个数据元素(或记录)的某个数据项的值
//   1.主关键字 可唯一地标识一个记录的关键字是主关键字
//   2.主关键字 反之,用以罗干记录的关键字是次关键字
// 查找成功否? 若查找表中存在的这样一个记录,则称查找成功.
//           查找结果给出整个记录的消息,或指示记录在查找表中的位置
//           否则称查找不成功:查找结果给出空记录或空指针

// 顺序查找:
//  应用范围 :
//  1.顺序表或线性链表表示的静态查找表
//  2.表内元素之间无序
//  缺点:AS太长,时间效率太低

// 折半查找:每次将待查找记录所在区间缩小一半
// 应用范围:
// 1. 必须是有序的,如果无序建议先排序
// 实现方法,递归和非递归

// 插值查找

// 斐波那契查找(黄金分割查找)



public class D {
    public static void main(String[] args) {
        int mid = 10;
        int temp =mid-1;
        System.out.println(mid);
        System.out.println(temp);
    }

}
